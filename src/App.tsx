import React, {useEffect, useState} from 'react';
import {SafeAreaProvider} from 'react-native-safe-area-context';
import {NavigationContainer, Theme as NavigationTheme, DefaultTheme} from '@react-navigation/native';
import {TailwindProvider} from 'tailwind-rn';
import utilities from '../tailwind.json'; // This file is generated by `tailwind-rn build`
import {initializeI18n} from '@i18n/index';
import {SentryService} from '@services/sentryService';
import {NotificationService} from '@services/notificationService';
import {useAppStore} from '@store/useAppStore';
import {StatusBar, Text, View, Linking, Platform, Alert } from 'react-native';
import JailMonkey from 'jail-monkey';
import { useTranslation } from 'react-i18next';
import RootNavigator from '@navigation/RootNavigator'; // Import the new RootNavigator
import { navigationRef } from '@services/navigationService'; // Optional: for global navigation
import AppTheme, { Colors, Fonts as AppFonts } from '@constants/theme'; // For status bar text color based on theme and full theme
import Logger from '@utils/logger';

// Initialize Sentry
SentryService.init();

// Initialize i18n
initializeI18n(); // Ensures i18n is ready before rendering

const AppContent: React.FC = () => {
  const { t } = useTranslation();
  const [isDeviceSecure, setIsDeviceSecure] = React.useState<boolean | null>(null);
  const { theme } = useAppStore(); // Get theme for status bar

  useEffect(() => {
    // Initialize Notifications
    const initNotifications = async () => {
      try {
        await NotificationService.initialize();
        await NotificationService.requestPermissions(); // Request permissions early
        await NotificationService.createDefaultChannels();
        Logger.info('NotificationService initialized successfully.');
      } catch (error) {
        Logger.error('Failed to initialize NotificationService', error);
      }
    };
    initNotifications();
  }, []);

  useEffect(() => {
    // Check for jailbreak/root
    const checkDeviceSecurity = () => {
      const isJailBroken = JailMonkey.isJailBroken();
      // Add other checks like JailMonkey.trustFall(), JailMonkey.canMockLocation() if needed
      if (isJailBroken) {
        Logger.warn('Device is jailbroken/rooted. App functionality might be limited or blocked.');
        setIsDeviceSecure(false);
        // Potentially show an alert or restrict features - handled by conditional render below
      } else {
        setIsDeviceSecure(true);
        Logger.info('Device security check: Passed (not jailbroken/rooted).');
      }
    };
    checkDeviceSecurity();
  }, []);


  if (isDeviceSecure === false) { // Explicitly check for false if null means loading/unchecked
    return (
      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', padding: 20, backgroundColor: Colors.background }}>
        <Text style={{ fontSize: 18, textAlign: 'center', color: Colors.destructive, fontWeight: 'bold' }}>
          {t('security.deviceCompromised')}
        </Text>
        <Text style={{ fontSize: 14, textAlign: 'center', marginTop: 10, color: Colors.text }}>
          {t('security.contactSupport')}
        </Text>
      </View>
    );
  }
  
  // if isDeviceSecure is null, it means check is ongoing. Can show a generic loader.
  // For simplicity, we proceed if it's not explicitly false.
  // A more robust solution would handle the null state with a loader.

  const navTheme: NavigationTheme = {
    dark: theme === 'dark',
    colors: {
        primary: Colors.primary,
        background: theme === 'dark' ? AppTheme.colors.gray900 : AppTheme.colors.background, // Example dark mode adjustment
        card: theme === 'dark' ? AppTheme.colors.gray800 : AppTheme.colors.card,
        text: theme === 'dark' ? AppTheme.colors.gray50 : AppTheme.colors.text,
        border: theme === 'dark' ? AppTheme.colors.gray700 : AppTheme.colors.border,
        notification: Colors.primary, // Or your notification color
    },
    fonts: AppTheme.fonts, // Add fonts property from AppTheme
  };


  return (
    <NavigationContainer ref={navigationRef} theme={navTheme}>
      <StatusBar barStyle={theme === 'dark' ? 'light-content' : 'dark-content'} backgroundColor={theme === 'dark' ? AppTheme.colors.gray900 : AppTheme.colors.background} />
      <RootNavigator />
    </NavigationContainer>
  );
};

const PatchedTailwindProvider = TailwindProvider as any; // Workaround for children prop issue

const App: React.FC = () => {
  // const {theme} = useAppStore(); // Theme is now accessed within AppContent or where needed

  // TailwindProvider expects 'utilities' prop.
  // Ensure tailwind.json is generated and correct.
  const typedUtilities = utilities as any; // Cast if type issues with generated json

  return (
    <PatchedTailwindProvider utilities={typedUtilities}>
      <SafeAreaProvider>
        <AppContent />
      </SafeAreaProvider>
    </PatchedTailwindProvider>
  );
};

export default SentryService.wrap(App); // Wrap with Sentry for error and performance monitoring